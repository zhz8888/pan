name: Sync Armbian Releases

on:
  schedule:
    - cron: '0 0 10 * *'  # 每月10号UTC时间午夜执行
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync_rock-3c:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Rock-3c_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download Rock-3C files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get Radxa-ROCK-3C-Armbian release ID and delete all files
        id: get_radxa_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/Radxa-ROCK-3C-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release Radxa-ROCK-3C-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done
      
      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`
            
            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF
      
      - name: Upload downloaded files to Radxa-ROCK-3C-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: Radxa-ROCK-3C-Armbian
          files: '*Rock-3c*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_orangepi-3b:
    runs-on: ubuntu-latest
    needs: sync_rock-3c
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Orangepi3b_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download OrangePi-3B files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get OrangePi-3B-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/OrangePi-3B-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release OrangePi-3B-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to OrangePi-3B-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: OrangePi-3B-Armbian
          files: '*Orangepi3b*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_emb-3531:
    runs-on: ubuntu-latest
    needs: sync_orangepi-3b
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get all tags from ophub/amlogic-s9xxx-armbian
        id: get_all_tags
        run: |
          ALL_TAGS=$(curl -s https://api.github.com/repos/ophub/amlogic-s9xxx-armbian/tags | jq -r '.[] | .name' | grep 'save_' | sort -r)
          
          if [ -z "$ALL_TAGS" ]; then
            echo "No tags containing 'save_' found"
            exit 1
          fi

          echo "::set-output name=all_tags::$ALL_TAGS"
      
      - name: Extract latest release date from tags
        id: extract_date
        run: |
          ALL_TAGS="${{ steps.get_all_tags.outputs.all_tags }}"
          LATEST_TAG=$(echo "$ALL_TAGS" | head -n1)
          RELEASE_DATE=$(echo "$LATEST_TAG" | grep -oP 'save_\K\d{4}\.\d{2}')
          echo "::set-output name=release_date::$RELEASE_DATE"

      - name: Generate download URLs
        id: generate_urls
        run: |
          RELEASE_DATE="${{ steps.extract_date.outputs.release_date }}"
          BASE_URL="https://api.github.com/repos/ophub/amlogic-s9xxx-armbian/releases/tags/"

          RELEASE_TAGS=(
            "Armbian_noble_save_$RELEASE_DATE"
            "Armbian_jammy_save_$RELEASE_DATE"
            "Armbian_bullseye_save_$RELEASE_DATE"
            "Armbian_bookworm_save_$RELEASE_DATE"
          )
          
          URL_LIST=""
          for TAG in "${RELEASE_TAGS[@]}"; do
            echo "Processing tag: $TAG"
            
            CURRENT_URLS=$(curl -s "$BASE_URL$TAG" | jq -r '.assets[] | select(.name | contains("emb3531")) | .browser_download_url' | tr '\n' ';')
            
            if [ -n "$CURRENT_URLS" ]; then
              URL_LIST+="$CURRENT_URLS"
              echo "Found URLs for $TAG"
            else
              echo "No emb3531 files found for tag $TAG"
            fi
          done

          URL_LIST=$(echo "$URL_LIST" | sed 's/^;//;s/;$//;s/;;/;/g')
          
          echo "::set-output name=url_list::$URL_LIST"

      - name: Download files from generated URLs
        id: download_files
        run: |
          URL_LIST="${{ steps.generate_urls.outputs.url_list }}"

          URL_COUNT=$(echo "$URL_LIST" | tr ';' '\n' | grep -v '^$' | wc -l)
          echo "Found $URL_COUNT files to download"
          
          if [ -z "$URL_LIST" ]; then
            echo "No URLs generated for download"
            exit 1
          fi

          echo "Download started..."
          echo "Total URLs: $(echo "$URL_LIST" | tr ';' '\n' | grep -v '^$' | wc -l)"
          
          IFS=';'
          for FILE_URL in $URL_LIST; do
            if [ -n "$FILE_URL" ]; then
              echo "Downloading: $FILE_URL"
              aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
            else
              echo "Skip invalid URL: $FILE_URL"
            fi
          done

      - name: Get EMB-3531-Armbian release ID and delete all files
        id: get_emb_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/EMB-3531-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release EMB-3531-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/ophub/amlogic-s9xxx-armbian/releases
          EOF

      - name: Upload downloaded files to EMB-3531-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: EMB-3531-Armbian
          files: '*emb3531*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_orangepi-zero:
    runs-on: ubuntu-latest
    needs: sync_emb-3531
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Orangepizero_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download OrangePi-Zero files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get OrangePi-Zero-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/OrangePi-Zero-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release OrangePi-Zero-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to OrangePi-Zero-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: OrangePi-Zero-Armbian
          files: '*Orangepizero*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_onecloud:
    runs-on: ubuntu-latest
    needs: sync_orangepi-zero
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Onecloud_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download OneCloud files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get OneCloud-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/OneCloud-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release OneCloud-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to OneCloud-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: OneCloud-Armbian
          files: '*Onecloud*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_nanopc-t4:
    runs-on: ubuntu-latest
    needs: sync_onecloud
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Nanopct4_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download NanoPC-T4 files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get NanoPC-T4-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/NanoPC-T4-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release NanoPC-T4-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to NanoPC-T4-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: NanoPC-T4-Armbian
          files: '*Nanopct4*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_radxa-cubie-a5e:
    runs-on: ubuntu-latest
    needs: sync_nanopc-t4
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Radxa-cubie-a5e_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download Radxa-Cubie-A5E files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get Radxa-Cubie-A5E-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/Radxa-Cubie-A5E-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release Radxa-Cubie-A5E-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to Radxa-Cubie-A5E-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: Radxa-Cubie-A5E-Armbian
          files: '*Radxa-cubie-a5e*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_nanopi-neo4:
    runs-on: ubuntu-latest
    needs: sync_radxa-cubie-a5e
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Nanopineo4_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download NanoPi-NEO4 files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get NanoPi-NEO4-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/NanoPi-NEO4-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release NanoPi-NEO4-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to NanoPi-NEO4-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: NanoPi-NEO4-Armbian
          files: '*Nanopineo4*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_nanopi-m4:
    runs-on: ubuntu-latest
    needs: sync_nanopi-neo4
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Nanopim4_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download NanoPi-M4 files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get NanoPi-M4-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/NanoPi-M4-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release NanoPi-M4-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to NanoPi-M4-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: NanoPi-M4-Armbian
          files: '*Nanopim4*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_orangepi-zero3:
    runs-on: ubuntu-latest
    needs: sync_nanopi-m4
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Orangepizero3_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download OrangePi-Zero3 files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get OrangePi-Zero3-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/OrangePi-Zero3-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release OrangePi-Zero3-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to OrangePi-Zero3-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: OrangePi-Zero3-Armbian
          files: '*Orangepizero3*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_nanopi-k2:
    runs-on: ubuntu-latest
    needs: sync_orangepi-zero3
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Nanopik2-s905_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download NanoPi-K2 files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get NanoPi-K2-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/NanoPi-K2-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release NanoPi-K2-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to NanoPi-K2-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: NanoPi-K2-Armbian
          files: '*Nanopik2*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_orangepi-one:
    runs-on: ubuntu-latest
    needs: sync_nanopi-k2
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/os
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/os/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Orangepione_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download OrangePi-One files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get OrangePi-One-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/OrangePi-One-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release OrangePi-One-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/os/releases
          EOF

      - name: Upload downloaded files to OrangePi-One-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: OrangePi-One-Armbian
          files: '*Orangepione*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync_orangepi-zero2:
    runs-on: ubuntu-latest
    needs: sync_orangepi-one
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get latest release info from armbian/community
        id: get_release
        run: |
          RELEASE_INFO=$(curl -s https://api.github.com/repos/armbian/community/releases/latest)
          ASSETS=$(echo $RELEASE_INFO | jq -r '.assets[] | select(.name | contains("_Orangepizero2_")) | .browser_download_url' | tr '\n' ';')
          echo "::set-output name=assets::$ASSETS"
      
      - name: Download OrangePi-Zero2 files
        run: |
          ASSETS="${{ steps.get_release.outputs.assets }}"
          IFS=';'
          for FILE_URL in $ASSETS; do
            aria2c --conf-path=${{ github.workspace }}/aria2.conf "$FILE_URL"
          done
      
      - name: Get OrangePi-Zero2-Armbian release ID and delete all files
        id: get_orangepi_release_id
        run: |
          ASSETS=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/OrangePi-Zero2-Armbian | jq -r '.assets[].id')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release OrangePi-Zero2-Armbian."
            exit 1
          fi

          for ASSET_ID in $ASSETS; do
            RESPONSE=$(curl -L \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -w "%{http_code}" -o /dev/null \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID)
            
            if [ "$RESPONSE" != "204" ]; then
              echo "Failed to delete asset with ID $ASSET_ID. Response status: $RESPONSE"
              exit 1
            else
              echo "Successfully deleted asset with ID $ASSET_ID."
            fi
          done

      - name: Prepare release note content
        run: |
          cat <<EOF | sed -E 's/^  //' > Release.md
            ## Armbian Image information
            - Default username: \`root\`
            - Default password: \`1234\`
            - Install command: \`armbian-install\`
            - Update command: \`armbian-update\`

            ## Armbian Image Verification
            - sha256sum

            Download from https://github.com/armbian/community/releases
          EOF

      - name: Upload downloaded files to OrangePi-Zero2-Armbian release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: OrangePi-Zero2-Armbian
          files: '*Orangepizero2*'
          body_path: Release.md
          make_latest: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
